#! /bin/sh
# Copyright (c) 1995-2001 SuSE GmbH Nuernberg, Germany.
#
# Author: Lenz Grimmer <grimmer@suse.de>
#
# /etc/init.d/powertweakd
#
#   and symbolic its link
#
# /usr/sbin/rcpowertweakd
#
### BEGIN INIT INFO
# Provides:       powertweakd
# Required-Start: $syslog $remote_fs
# Required-Stop:
# Default-Start:  2 3 5
# Default-Stop:
# Description:    Powertweak performance tuning utility
### END INIT INFO

# Source SuSE config
. /etc/rc.config

# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

# Force execution if not called by a runlevel directory.
test $link = $base && START_POWERTWEAKD=yes
test "$START_POWERTWEAKD" = yes || exit 0

# Test for required binaries first
POWERTWEAKD=/usr/sbin/powertweakd
test -x $POWERTWEAKD || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting service powertweak"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# Do not start is a a daemon by default to be
	# consistent with the old behaviour
	# remove the "--no-daemon", if you need it
	startproc $POWERTWEAKD --no-daemon

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down service powertweak"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	killproc -TERM $POWERTWEAKD

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Stop the service and if this succeeds (i.e. the 
	## service was running before), start it again.
	## Note: try-restart is not (yet) part of LSB (as of 0.7.5)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## If first returns OK call the second, if first or
	## second command fails, set echo return value.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)

	echo -n "Reload service powertweak"
	killproc -HUP $POWERTWEAKD
	rc_status -v

	;;
    reload)

	echo -n "Reload service powertweak"
	killproc -HUP $POWERTWEAKD
	rc_status -v

	;;
    status)
	echo -n "Checking for service powertweak: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Status has a slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	# NOTE: checkproc returns LSB compliant status values.
	checkproc $POWERTWEAKD
	rc_status -v
	;;
    probe)
	## Optional: Probe for the necessity of a reload,
	## give out the argument which is required for a reload.

	test /etc/powertweak/tweaks -nt /var/run/powertweakd.pid && echo reload
	;;
    *)
	echo "Usage: $0 {start|stop|status|restart|reload|force-reload|probe}"
	exit 1
	;;
esac
rc_exit
